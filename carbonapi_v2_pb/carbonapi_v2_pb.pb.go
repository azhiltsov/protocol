// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: carbonapi_v2_pb.proto

/*
	Package carbonapi_v2_pb is a generated protocol buffer package.

	It is generated from these files:
		carbonapi_v2_pb.proto

	It has these top-level messages:
		FetchResponse
		MultiFetchResponse
		GlobMatch
		GlobResponse
		Retention
		InfoResponse
		ServerInfoResponse
		ZipperInfoResponse
		ListMetricsResponse
		MetricDetails
		MetricDetailsResponse
*/
package carbonapi_v2_pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type FetchResponse struct {
	Name      string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	StartTime int32     `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	StopTime  int32     `protobuf:"varint,3,opt,name=stopTime,proto3" json:"stopTime,omitempty"`
	StepTime  int32     `protobuf:"varint,4,opt,name=stepTime,proto3" json:"stepTime,omitempty"`
	Values    []float64 `protobuf:"fixed64,5,rep,packed,name=values" json:"values,omitempty"`
	IsAbsent  []bool    `protobuf:"varint,6,rep,packed,name=isAbsent" json:"isAbsent,omitempty"`
}

func (m *FetchResponse) Reset()                    { *m = FetchResponse{} }
func (m *FetchResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchResponse) ProtoMessage()               {}
func (*FetchResponse) Descriptor() ([]byte, []int) { return fileDescriptorCarbonapiV2Pb, []int{0} }

func (m *FetchResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FetchResponse) GetStartTime() int32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *FetchResponse) GetStopTime() int32 {
	if m != nil {
		return m.StopTime
	}
	return 0
}

func (m *FetchResponse) GetStepTime() int32 {
	if m != nil {
		return m.StepTime
	}
	return 0
}

func (m *FetchResponse) GetValues() []float64 {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *FetchResponse) GetIsAbsent() []bool {
	if m != nil {
		return m.IsAbsent
	}
	return nil
}

type MultiFetchResponse struct {
	Metrics []FetchResponse `protobuf:"bytes,1,rep,name=metrics" json:"metrics"`
}

func (m *MultiFetchResponse) Reset()                    { *m = MultiFetchResponse{} }
func (m *MultiFetchResponse) String() string            { return proto.CompactTextString(m) }
func (*MultiFetchResponse) ProtoMessage()               {}
func (*MultiFetchResponse) Descriptor() ([]byte, []int) { return fileDescriptorCarbonapiV2Pb, []int{1} }

func (m *MultiFetchResponse) GetMetrics() []FetchResponse {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type GlobMatch struct {
	Path   string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	IsLeaf bool   `protobuf:"varint,2,opt,name=isLeaf,proto3" json:"isLeaf,omitempty"`
}

func (m *GlobMatch) Reset()                    { *m = GlobMatch{} }
func (m *GlobMatch) String() string            { return proto.CompactTextString(m) }
func (*GlobMatch) ProtoMessage()               {}
func (*GlobMatch) Descriptor() ([]byte, []int) { return fileDescriptorCarbonapiV2Pb, []int{2} }

func (m *GlobMatch) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *GlobMatch) GetIsLeaf() bool {
	if m != nil {
		return m.IsLeaf
	}
	return false
}

type GlobResponse struct {
	Name    string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Matches []GlobMatch `protobuf:"bytes,2,rep,name=matches" json:"matches"`
}

func (m *GlobResponse) Reset()                    { *m = GlobResponse{} }
func (m *GlobResponse) String() string            { return proto.CompactTextString(m) }
func (*GlobResponse) ProtoMessage()               {}
func (*GlobResponse) Descriptor() ([]byte, []int) { return fileDescriptorCarbonapiV2Pb, []int{3} }

func (m *GlobResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GlobResponse) GetMatches() []GlobMatch {
	if m != nil {
		return m.Matches
	}
	return nil
}

type Retention struct {
	SecondsPerPoint int32 `protobuf:"varint,1,opt,name=secondsPerPoint,proto3" json:"secondsPerPoint,omitempty"`
	NumberOfPoints  int32 `protobuf:"varint,2,opt,name=numberOfPoints,proto3" json:"numberOfPoints,omitempty"`
}

func (m *Retention) Reset()                    { *m = Retention{} }
func (m *Retention) String() string            { return proto.CompactTextString(m) }
func (*Retention) ProtoMessage()               {}
func (*Retention) Descriptor() ([]byte, []int) { return fileDescriptorCarbonapiV2Pb, []int{4} }

func (m *Retention) GetSecondsPerPoint() int32 {
	if m != nil {
		return m.SecondsPerPoint
	}
	return 0
}

func (m *Retention) GetNumberOfPoints() int32 {
	if m != nil {
		return m.NumberOfPoints
	}
	return 0
}

type InfoResponse struct {
	Name              string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AggregationMethod string      `protobuf:"bytes,2,opt,name=aggregationMethod,proto3" json:"aggregationMethod,omitempty"`
	MaxRetention      int32       `protobuf:"varint,3,opt,name=maxRetention,proto3" json:"maxRetention,omitempty"`
	XFilesFactor      float32     `protobuf:"fixed32,4,opt,name=xFilesFactor,proto3" json:"xFilesFactor,omitempty"`
	Retentions        []Retention `protobuf:"bytes,5,rep,name=retentions" json:"retentions"`
}

func (m *InfoResponse) Reset()                    { *m = InfoResponse{} }
func (m *InfoResponse) String() string            { return proto.CompactTextString(m) }
func (*InfoResponse) ProtoMessage()               {}
func (*InfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorCarbonapiV2Pb, []int{5} }

func (m *InfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InfoResponse) GetAggregationMethod() string {
	if m != nil {
		return m.AggregationMethod
	}
	return ""
}

func (m *InfoResponse) GetMaxRetention() int32 {
	if m != nil {
		return m.MaxRetention
	}
	return 0
}

func (m *InfoResponse) GetXFilesFactor() float32 {
	if m != nil {
		return m.XFilesFactor
	}
	return 0
}

func (m *InfoResponse) GetRetentions() []Retention {
	if m != nil {
		return m.Retentions
	}
	return nil
}

type ServerInfoResponse struct {
	Server string        `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Info   *InfoResponse `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (m *ServerInfoResponse) Reset()                    { *m = ServerInfoResponse{} }
func (m *ServerInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*ServerInfoResponse) ProtoMessage()               {}
func (*ServerInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorCarbonapiV2Pb, []int{6} }

func (m *ServerInfoResponse) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *ServerInfoResponse) GetInfo() *InfoResponse {
	if m != nil {
		return m.Info
	}
	return nil
}

type ZipperInfoResponse struct {
	Responses []ServerInfoResponse `protobuf:"bytes,1,rep,name=responses" json:"responses"`
}

func (m *ZipperInfoResponse) Reset()                    { *m = ZipperInfoResponse{} }
func (m *ZipperInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*ZipperInfoResponse) ProtoMessage()               {}
func (*ZipperInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorCarbonapiV2Pb, []int{7} }

func (m *ZipperInfoResponse) GetResponses() []ServerInfoResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

type ListMetricsResponse struct {
	Metrics []string `protobuf:"bytes,1,rep,name=Metrics" json:"Metrics,omitempty"`
}

func (m *ListMetricsResponse) Reset()                    { *m = ListMetricsResponse{} }
func (m *ListMetricsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListMetricsResponse) ProtoMessage()               {}
func (*ListMetricsResponse) Descriptor() ([]byte, []int) { return fileDescriptorCarbonapiV2Pb, []int{8} }

func (m *ListMetricsResponse) GetMetrics() []string {
	if m != nil {
		return m.Metrics
	}
	return nil
}

// MetricDetails and MetricDetailsResponse is not guaranteed to stay the same in future releases
// But we'll do our best to make them stable and only to extend them if that's necessary
type MetricDetails struct {
	Size_   int64 `protobuf:"varint,2,opt,name=Size,proto3" json:"Size,omitempty"`
	ModTime int64 `protobuf:"varint,3,opt,name=ModTime,proto3" json:"ModTime,omitempty"`
	ATime   int64 `protobuf:"varint,4,opt,name=ATime,proto3" json:"ATime,omitempty"`
	RdTime  int64 `protobuf:"varint,5,opt,name=RdTime,proto3" json:"RdTime,omitempty"`
}

func (m *MetricDetails) Reset()                    { *m = MetricDetails{} }
func (m *MetricDetails) String() string            { return proto.CompactTextString(m) }
func (*MetricDetails) ProtoMessage()               {}
func (*MetricDetails) Descriptor() ([]byte, []int) { return fileDescriptorCarbonapiV2Pb, []int{9} }

func (m *MetricDetails) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *MetricDetails) GetModTime() int64 {
	if m != nil {
		return m.ModTime
	}
	return 0
}

func (m *MetricDetails) GetATime() int64 {
	if m != nil {
		return m.ATime
	}
	return 0
}

func (m *MetricDetails) GetRdTime() int64 {
	if m != nil {
		return m.RdTime
	}
	return 0
}

type MetricDetailsResponse struct {
	Metrics    map[string]*MetricDetails `protobuf:"bytes,1,rep,name=metrics" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	FreeSpace  uint64                    `protobuf:"varint,2,opt,name=FreeSpace,proto3" json:"FreeSpace,omitempty"`
	TotalSpace uint64                    `protobuf:"varint,3,opt,name=TotalSpace,proto3" json:"TotalSpace,omitempty"`
}

func (m *MetricDetailsResponse) Reset()         { *m = MetricDetailsResponse{} }
func (m *MetricDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*MetricDetailsResponse) ProtoMessage()    {}
func (*MetricDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorCarbonapiV2Pb, []int{10}
}

func (m *MetricDetailsResponse) GetMetrics() map[string]*MetricDetails {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *MetricDetailsResponse) GetFreeSpace() uint64 {
	if m != nil {
		return m.FreeSpace
	}
	return 0
}

func (m *MetricDetailsResponse) GetTotalSpace() uint64 {
	if m != nil {
		return m.TotalSpace
	}
	return 0
}

func init() {
	proto.RegisterType((*FetchResponse)(nil), "carbonapi_v2_pb.FetchResponse")
	proto.RegisterType((*MultiFetchResponse)(nil), "carbonapi_v2_pb.MultiFetchResponse")
	proto.RegisterType((*GlobMatch)(nil), "carbonapi_v2_pb.GlobMatch")
	proto.RegisterType((*GlobResponse)(nil), "carbonapi_v2_pb.GlobResponse")
	proto.RegisterType((*Retention)(nil), "carbonapi_v2_pb.Retention")
	proto.RegisterType((*InfoResponse)(nil), "carbonapi_v2_pb.InfoResponse")
	proto.RegisterType((*ServerInfoResponse)(nil), "carbonapi_v2_pb.ServerInfoResponse")
	proto.RegisterType((*ZipperInfoResponse)(nil), "carbonapi_v2_pb.ZipperInfoResponse")
	proto.RegisterType((*ListMetricsResponse)(nil), "carbonapi_v2_pb.ListMetricsResponse")
	proto.RegisterType((*MetricDetails)(nil), "carbonapi_v2_pb.MetricDetails")
	proto.RegisterType((*MetricDetailsResponse)(nil), "carbonapi_v2_pb.MetricDetailsResponse")
}
func (m *FetchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(m.StartTime))
	}
	if m.StopTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(m.StopTime))
	}
	if m.StepTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(m.StepTime))
	}
	if len(m.Values) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(len(m.Values)*8))
		for _, num := range m.Values {
			f1 := math.Float64bits(float64(num))
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(f1))
			i += 8
		}
	}
	if len(m.IsAbsent) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(len(m.IsAbsent)))
		for _, b := range m.IsAbsent {
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	return i, nil
}

func (m *MultiFetchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiFetchResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, msg := range m.Metrics {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GlobMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobMatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.IsLeaf {
		dAtA[i] = 0x10
		i++
		if m.IsLeaf {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GlobResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Matches) > 0 {
		for _, msg := range m.Matches {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Retention) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Retention) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SecondsPerPoint != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(m.SecondsPerPoint))
	}
	if m.NumberOfPoints != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(m.NumberOfPoints))
	}
	return i, nil
}

func (m *InfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.AggregationMethod) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(len(m.AggregationMethod)))
		i += copy(dAtA[i:], m.AggregationMethod)
	}
	if m.MaxRetention != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(m.MaxRetention))
	}
	if m.XFilesFactor != 0 {
		dAtA[i] = 0x25
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.XFilesFactor))))
		i += 4
	}
	if len(m.Retentions) > 0 {
		for _, msg := range m.Retentions {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ServerInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Server) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(len(m.Server)))
		i += copy(dAtA[i:], m.Server)
	}
	if m.Info != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(m.Info.Size()))
		n2, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *ZipperInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZipperInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Responses) > 0 {
		for _, msg := range m.Responses {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ListMetricsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListMetricsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, s := range m.Metrics {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *MetricDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricDetails) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(m.Size_))
	}
	if m.ModTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(m.ModTime))
	}
	if m.ATime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(m.ATime))
	}
	if m.RdTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(m.RdTime))
	}
	return i, nil
}

func (m *MetricDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for k, _ := range m.Metrics {
			dAtA[i] = 0xa
			i++
			v := m.Metrics[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovCarbonapiV2Pb(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovCarbonapiV2Pb(uint64(len(k))) + msgSize
			i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	if m.FreeSpace != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(m.FreeSpace))
	}
	if m.TotalSpace != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCarbonapiV2Pb(dAtA, i, uint64(m.TotalSpace))
	}
	return i, nil
}

func encodeVarintCarbonapiV2Pb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FetchResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCarbonapiV2Pb(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovCarbonapiV2Pb(uint64(m.StartTime))
	}
	if m.StopTime != 0 {
		n += 1 + sovCarbonapiV2Pb(uint64(m.StopTime))
	}
	if m.StepTime != 0 {
		n += 1 + sovCarbonapiV2Pb(uint64(m.StepTime))
	}
	if len(m.Values) > 0 {
		n += 1 + sovCarbonapiV2Pb(uint64(len(m.Values)*8)) + len(m.Values)*8
	}
	if len(m.IsAbsent) > 0 {
		n += 1 + sovCarbonapiV2Pb(uint64(len(m.IsAbsent))) + len(m.IsAbsent)*1
	}
	return n
}

func (m *MultiFetchResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.Size()
			n += 1 + l + sovCarbonapiV2Pb(uint64(l))
		}
	}
	return n
}

func (m *GlobMatch) Size() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovCarbonapiV2Pb(uint64(l))
	}
	if m.IsLeaf {
		n += 2
	}
	return n
}

func (m *GlobResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCarbonapiV2Pb(uint64(l))
	}
	if len(m.Matches) > 0 {
		for _, e := range m.Matches {
			l = e.Size()
			n += 1 + l + sovCarbonapiV2Pb(uint64(l))
		}
	}
	return n
}

func (m *Retention) Size() (n int) {
	var l int
	_ = l
	if m.SecondsPerPoint != 0 {
		n += 1 + sovCarbonapiV2Pb(uint64(m.SecondsPerPoint))
	}
	if m.NumberOfPoints != 0 {
		n += 1 + sovCarbonapiV2Pb(uint64(m.NumberOfPoints))
	}
	return n
}

func (m *InfoResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCarbonapiV2Pb(uint64(l))
	}
	l = len(m.AggregationMethod)
	if l > 0 {
		n += 1 + l + sovCarbonapiV2Pb(uint64(l))
	}
	if m.MaxRetention != 0 {
		n += 1 + sovCarbonapiV2Pb(uint64(m.MaxRetention))
	}
	if m.XFilesFactor != 0 {
		n += 5
	}
	if len(m.Retentions) > 0 {
		for _, e := range m.Retentions {
			l = e.Size()
			n += 1 + l + sovCarbonapiV2Pb(uint64(l))
		}
	}
	return n
}

func (m *ServerInfoResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Server)
	if l > 0 {
		n += 1 + l + sovCarbonapiV2Pb(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovCarbonapiV2Pb(uint64(l))
	}
	return n
}

func (m *ZipperInfoResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovCarbonapiV2Pb(uint64(l))
		}
	}
	return n
}

func (m *ListMetricsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, s := range m.Metrics {
			l = len(s)
			n += 1 + l + sovCarbonapiV2Pb(uint64(l))
		}
	}
	return n
}

func (m *MetricDetails) Size() (n int) {
	var l int
	_ = l
	if m.Size_ != 0 {
		n += 1 + sovCarbonapiV2Pb(uint64(m.Size_))
	}
	if m.ModTime != 0 {
		n += 1 + sovCarbonapiV2Pb(uint64(m.ModTime))
	}
	if m.ATime != 0 {
		n += 1 + sovCarbonapiV2Pb(uint64(m.ATime))
	}
	if m.RdTime != 0 {
		n += 1 + sovCarbonapiV2Pb(uint64(m.RdTime))
	}
	return n
}

func (m *MetricDetailsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for k, v := range m.Metrics {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCarbonapiV2Pb(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCarbonapiV2Pb(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCarbonapiV2Pb(uint64(mapEntrySize))
		}
	}
	if m.FreeSpace != 0 {
		n += 1 + sovCarbonapiV2Pb(uint64(m.FreeSpace))
	}
	if m.TotalSpace != 0 {
		n += 1 + sovCarbonapiV2Pb(uint64(m.TotalSpace))
	}
	return n
}

func sovCarbonapiV2Pb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCarbonapiV2Pb(x uint64) (n int) {
	return sovCarbonapiV2Pb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FetchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV2Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarbonapiV2Pb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopTime", wireType)
			}
			m.StopTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StopTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StepTime", wireType)
			}
			m.StepTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StepTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Values = append(m.Values, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCarbonapiV2Pb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCarbonapiV2Pb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Values = append(m.Values, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
		case 6:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCarbonapiV2Pb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IsAbsent = append(m.IsAbsent, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCarbonapiV2Pb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCarbonapiV2Pb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCarbonapiV2Pb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IsAbsent = append(m.IsAbsent, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAbsent", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV2Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV2Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiFetchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV2Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiFetchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiFetchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarbonapiV2Pb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, FetchResponse{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV2Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV2Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV2Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarbonapiV2Pb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLeaf", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLeaf = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV2Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV2Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV2Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarbonapiV2Pb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarbonapiV2Pb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Matches = append(m.Matches, GlobMatch{})
			if err := m.Matches[len(m.Matches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV2Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV2Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Retention) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV2Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Retention: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Retention: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondsPerPoint", wireType)
			}
			m.SecondsPerPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondsPerPoint |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfPoints", wireType)
			}
			m.NumberOfPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfPoints |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV2Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV2Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV2Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarbonapiV2Pb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregationMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarbonapiV2Pb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregationMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRetention", wireType)
			}
			m.MaxRetention = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRetention |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field XFilesFactor", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.XFilesFactor = float32(math.Float32frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retentions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarbonapiV2Pb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Retentions = append(m.Retentions, Retention{})
			if err := m.Retentions[len(m.Retentions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV2Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV2Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV2Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarbonapiV2Pb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Server = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarbonapiV2Pb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &InfoResponse{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV2Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV2Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZipperInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV2Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZipperInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZipperInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarbonapiV2Pb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, ServerInfoResponse{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV2Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV2Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListMetricsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV2Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListMetricsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListMetricsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarbonapiV2Pb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV2Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV2Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV2Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModTime", wireType)
			}
			m.ModTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ATime", wireType)
			}
			m.ATime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ATime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RdTime", wireType)
			}
			m.RdTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RdTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV2Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV2Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV2Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarbonapiV2Pb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metrics == nil {
				m.Metrics = make(map[string]*MetricDetails)
			}
			var mapkey string
			var mapvalue *MetricDetails
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCarbonapiV2Pb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCarbonapiV2Pb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCarbonapiV2Pb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCarbonapiV2Pb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCarbonapiV2Pb
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthCarbonapiV2Pb
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &MetricDetails{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCarbonapiV2Pb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCarbonapiV2Pb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metrics[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeSpace", wireType)
			}
			m.FreeSpace = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeSpace |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSpace", wireType)
			}
			m.TotalSpace = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSpace |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV2Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV2Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCarbonapiV2Pb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCarbonapiV2Pb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCarbonapiV2Pb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCarbonapiV2Pb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCarbonapiV2Pb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCarbonapiV2Pb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCarbonapiV2Pb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCarbonapiV2Pb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("carbonapi_v2_pb.proto", fileDescriptorCarbonapiV2Pb) }

var fileDescriptorCarbonapiV2Pb = []byte{
	// 665 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x5f, 0x4f, 0x13, 0x4f,
	0x14, 0xfd, 0x6d, 0xb7, 0x2d, 0xec, 0xa5, 0xfc, 0xd0, 0x51, 0xc8, 0xa6, 0xd1, 0xda, 0xac, 0x89,
	0xe9, 0x83, 0x42, 0x04, 0x13, 0x0d, 0x0f, 0x46, 0x88, 0x96, 0x98, 0xd0, 0x48, 0x06, 0x9e, 0x48,
	0x90, 0xcc, 0x2e, 0xb7, 0xed, 0x84, 0xee, 0xce, 0x66, 0x66, 0x4a, 0xc0, 0x27, 0xbf, 0x90, 0xdf,
	0x83, 0x47, 0x9f, 0x7d, 0x30, 0x86, 0x4f, 0x62, 0x76, 0x66, 0x77, 0xe9, 0x1f, 0x82, 0x6f, 0xf7,
	0x9c, 0x3b, 0xe7, 0xce, 0xb9, 0x77, 0xfe, 0xc0, 0x6a, 0xc4, 0x64, 0x28, 0x12, 0x96, 0xf2, 0xd3,
	0x8b, 0xcd, 0xd3, 0x34, 0x5c, 0x4f, 0xa5, 0xd0, 0x82, 0xac, 0xcc, 0xd0, 0xcd, 0x57, 0x03, 0xae,
	0x87, 0xe3, 0x70, 0x3d, 0x12, 0xf1, 0xc6, 0x40, 0x0c, 0xc4, 0x86, 0x59, 0x17, 0x8e, 0xfb, 0x06,
	0x19, 0x60, 0x22, 0xab, 0x0f, 0x7e, 0x38, 0xb0, 0xdc, 0x45, 0x1d, 0x0d, 0x29, 0xaa, 0x54, 0x24,
	0x0a, 0x09, 0x81, 0x6a, 0xc2, 0x62, 0xf4, 0x9d, 0xb6, 0xd3, 0xf1, 0xa8, 0x89, 0xc9, 0x13, 0xf0,
	0x94, 0x66, 0x52, 0x1f, 0xf1, 0x18, 0xfd, 0x4a, 0xdb, 0xe9, 0xd4, 0xe8, 0x2d, 0x41, 0x9a, 0xb0,
	0xa8, 0xb4, 0x48, 0x4d, 0xd2, 0x35, 0xc9, 0x12, 0xdb, 0x1c, 0xda, 0x5c, 0xb5, 0xc8, 0x59, 0x4c,
	0xd6, 0xa0, 0x7e, 0xc1, 0x46, 0x63, 0x54, 0x7e, 0xad, 0xed, 0x76, 0x1c, 0x9a, 0xa3, 0x4c, 0xc3,
	0xd5, 0x4e, 0xa8, 0x30, 0xd1, 0x7e, 0xbd, 0xed, 0x76, 0x16, 0x69, 0x89, 0x83, 0x23, 0x20, 0xbd,
	0xf1, 0x48, 0xf3, 0x69, 0xcf, 0xef, 0x61, 0x21, 0x46, 0x2d, 0x79, 0xa4, 0x7c, 0xa7, 0xed, 0x76,
	0x96, 0x36, 0x5b, 0xeb, 0xb3, 0xe3, 0x9a, 0x12, 0xec, 0x56, 0xaf, 0x7f, 0x3f, 0xfb, 0x8f, 0x16,
	0xa2, 0xe0, 0x2d, 0x78, 0x7b, 0x23, 0x11, 0xf6, 0x98, 0x8e, 0x86, 0xd9, 0x00, 0x52, 0xa6, 0x87,
	0xc5, 0x00, 0xb2, 0x38, 0xb3, 0xca, 0xd5, 0x3e, 0xb2, 0xbe, 0xe9, 0x7e, 0x91, 0xe6, 0x28, 0xf8,
	0x0a, 0x8d, 0x4c, 0x78, 0xef, 0xf0, 0xb6, 0x61, 0x21, 0xce, 0x0a, 0xa3, 0xf2, 0x2b, 0xc6, 0x5c,
	0x73, 0xce, 0x5c, 0xb9, 0x79, 0x69, 0xcc, 0x0a, 0x82, 0x13, 0xf0, 0x28, 0x6a, 0x4c, 0x34, 0x17,
	0x09, 0xe9, 0xc0, 0x8a, 0xc2, 0x48, 0x24, 0x67, 0xea, 0x00, 0xe5, 0x81, 0xe0, 0x89, 0x36, 0xfb,
	0xd4, 0xe8, 0x2c, 0x4d, 0x5e, 0xc0, 0xff, 0xc9, 0x38, 0x0e, 0x51, 0x7e, 0xe9, 0x1b, 0x42, 0xe5,
	0x87, 0x36, 0xc3, 0x06, 0xbf, 0x1c, 0x68, 0x7c, 0x4e, 0xfa, 0xe2, 0x5e, 0xff, 0x2f, 0xe1, 0x21,
	0x1b, 0x0c, 0x24, 0x0e, 0x58, 0xe6, 0xa2, 0x87, 0x7a, 0x28, 0xce, 0x4c, 0x3d, 0x8f, 0xce, 0x27,
	0x48, 0x00, 0x8d, 0x98, 0x5d, 0x96, 0xa6, 0xf3, 0x0b, 0x31, 0xc5, 0x65, 0x6b, 0x2e, 0xbb, 0x7c,
	0x84, 0xaa, 0xcb, 0x22, 0x2d, 0xa4, 0xb9, 0x18, 0x15, 0x3a, 0xc5, 0x91, 0x0f, 0x00, 0xb2, 0x10,
	0xd8, 0x0b, 0x72, 0xd7, 0xe0, 0xca, 0x9a, 0xf9, 0xe0, 0x26, 0x34, 0xc1, 0x29, 0x90, 0x43, 0x94,
	0x17, 0x28, 0xa7, 0x3a, 0x5c, 0x83, 0xba, 0x32, 0x6c, 0xde, 0x63, 0x8e, 0xc8, 0x6b, 0xa8, 0xf2,
	0xa4, 0x2f, 0x4c, 0x63, 0x4b, 0x9b, 0x4f, 0xe7, 0x76, 0x9a, 0x2c, 0x42, 0xcd, 0xd2, 0xe0, 0x04,
	0xc8, 0x31, 0x4f, 0xd3, 0x99, 0x0d, 0xf6, 0xc0, 0x93, 0x79, 0x5c, 0xdc, 0xc6, 0xe7, 0x73, 0xd5,
	0xe6, 0x8d, 0xe5, 0x0d, 0xdc, 0x6a, 0x83, 0x0d, 0x78, 0xb4, 0xcf, 0x95, 0xee, 0xd9, 0x3b, 0x5a,
	0xd6, 0xf7, 0x61, 0xa1, 0x37, 0x71, 0xd7, 0x3d, 0x5a, 0xc0, 0xe0, 0x1c, 0x96, 0x6d, 0xf8, 0x11,
	0x35, 0xe3, 0x23, 0x95, 0x9d, 0xe6, 0x21, 0xff, 0x66, 0x5f, 0xac, 0x4b, 0x4d, 0x6c, 0xe4, 0xe2,
	0xac, 0x7c, 0xab, 0x2e, 0x2d, 0x20, 0x79, 0x0c, 0xb5, 0x9d, 0xf2, 0x9d, 0xba, 0xd4, 0x82, 0x6c,
	0x5e, 0xd4, 0x2e, 0xaf, 0x19, 0x3a, 0x47, 0xc1, 0xf7, 0x0a, 0xac, 0x4e, 0xed, 0x56, 0x1a, 0xec,
	0xcd, 0x3e, 0xc6, 0xad, 0xb9, 0xf6, 0xef, 0x14, 0xe6, 0xac, 0xfa, 0x94, 0x68, 0x79, 0x55, 0xbe,
	0xcd, 0xec, 0xef, 0xe9, 0x4a, 0xc4, 0xc3, 0x94, 0x45, 0xb6, 0x93, 0x2a, 0xbd, 0x25, 0x48, 0x0b,
	0xe0, 0x48, 0x68, 0x36, 0xb2, 0x69, 0xd7, 0xa4, 0x27, 0x98, 0xe6, 0x31, 0x34, 0x26, 0xcb, 0x92,
	0x07, 0xe0, 0x9e, 0xe3, 0x55, 0x7e, 0xf6, 0x59, 0x48, 0xde, 0x40, 0xcd, 0xfc, 0x3b, 0xf9, 0xc9,
	0xb7, 0xfe, 0x61, 0xd6, 0x2e, 0xde, 0xae, 0xbc, 0x73, 0x76, 0x1b, 0xd7, 0x37, 0x2d, 0xe7, 0xe7,
	0x4d, 0xcb, 0xf9, 0x73, 0xd3, 0x72, 0xc2, 0xba, 0xf9, 0x50, 0xb7, 0xfe, 0x06, 0x00, 0x00, 0xff,
	0xff, 0xa2, 0x3b, 0xc5, 0x34, 0xa9, 0x05, 0x00, 0x00,
}
